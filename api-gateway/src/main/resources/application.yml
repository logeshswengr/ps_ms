spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      routes:
        - id: movie-service
          uri: lb://movie-service
          predicates:
          - Path=/movie/**
        - id: theatre-service
          uri: lb://theatre-service
          predicates:
          - Path=/theatre/**
        - id: user-service
          uri: lb://user-service
          predicates:
          - Path=/user/**
        - id: discovery-server
          uri: http://eureka:password@${app.eureka-server}:8761
          filters: SetPath=/
          predicates: Path=/eureka/web
        - id: discovery-server-static
          uri: http://eureka:password@${app.eureka-server}:8761
          predicates: Path=/eureka/**
  security:
    oauth2:
      resourceserver:
        jwt:
          # Spring Boot will read the openid configuration and will fetch
          # all the endpoints to make an authorization
          issuer-uri: http://localhost:8080/realms/spring-boot-microservices-realm


server:
  port: 8181

# Eureka client config
eureka:
  client:
    serviceUrl:
      defaultZone: http://eureka:password@localhost:8761/eureka

app:
  eureka-server: localhost

# Increase the logging level
logging:
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

# Actuator Properties
management:
  endpoints:
    web:
      exposure:
        include: prometheus
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0 # To trace 100% of the requests in the system
